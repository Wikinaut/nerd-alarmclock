#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of KeyController - base class with operational functions
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, os, signal

class KeyController(object):
  """ Key controller """

  # initialize object   ----------------------------------------------------

  def init(self,settings):
    """ save some settings """

    self._settings   = settings
    self._stop_event = settings.stop_event

  # --- change alarm state   -----------------------------------------------

  def change_alarm_state(self,btn):
    """ change the state of the given alarm """

    nr = btn[-1]
    self._settings.log.msg("KeyController: changing state of alarm %s" % nr)

    old = self._settings.get("alarm."+nr+".state")

    if old == "disabled":
      new = "enabled"
    elif old == "enabled":
      new = "disabled"
    elif old in ["ringing","snooze"]:
      new = "enabled"

    self._settings.set("alarm."+nr+".state",new)

  # --- cylcle display brightness   ---------------------------------------

  def cycle_display_brightness(self,unused):
    """ cycle through display brightness levels """

    self._settings.log.msg("KeyController: changing display brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "display.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_brightness(self,unused):
    """ cycle through LED brightness levels """

    self._settings.log.msg("KeyController: changing led brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "led.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle display mode   ---------------------------------------------

  def cycle_display_mode(self,unused):
    """ cycle through display mode (future feature) """

    self._settings.log.msg("KeyController: changing display mode")

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_mode(self,unused):
    """ cycle through LED mode (future feature) """

    self._settings.log.msg("KeyController: changing led mode")

  # --- process SNZ-key (either show display or start snooze)   ------------

  def handle_snz(self,unused):
    """ turn on display-brightness for a few seconds / start snooze"""

    # query if alarm is in progress -> start snooze
    nr = self._settings.get("_current_alarm")
    self._settings.log.msg("KeyController: current alarm: %r" % nr)
    if nr:
      self._settings.set("alarm.%s.state" % nr,"snooze")    # will trigger snooze
      return

    # else if radio is on: show channel
    if self._settings.get("_radio.state"):
      self._settings.set("_radio.show_channel",True)
      return

    # else: turn on display for two seconds
    old = self._settings.get("_display.brightness")
    if old == 0:
      self._settings.set("_display.brightness",3)
      time.sleep(2)
      self._settings.set("_display.brightness",old)

  # --- restart the systemd-service   --------------------------------------

  def restart_service(self,unused):
    """ restart the systemd-service """

    self._settings.log.msg("KeyController: restarting the clock")
    time.sleep(1)
    os.system("sudo /bin/systemctl restart nerd-alarmclock.service &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- reboot the system   ------------------------------------------------

  def reboot_system(self,unused):
    """ reboot the system-service """

    self._settings.log.msg("KeyController: rebooting the system")
    time.sleep(1)
    os.system("sudo /sbin/reboot &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- halt the system   --------------------------------------------------

  def shutdown_system(self,unused):
    """ shutdown the system-service """

    self._settings.log.msg("KeyController: initiating shutdown")
    time.sleep(1)
    os.system("sudo /sbin/halt &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- toggle radio on or off   ------------------------------------------

  def radio_toggle(self,unused):
    """ toggle radio on or off """

    old_state = self._settings.get("_radio.state")
    new_state = not old_state
    self._settings.log.msg("KeyController: toggle radio state to %r" % new_state)
    self._settings.set("_radio.state", new_state)

  # --- switch to next channel list   -------------------------------------

  def radio_switch_channel_list(self,unused):
    """ switch to next channel list """

    self._settings.log.msg("KeyController: switching channel list")
    self._settings.inc("_radio.list")

  # --- increase volume   -------------------------------------------------

  def radio_volume_up(self,unused):
    """ increase volume """

    self._settings.log.msg("KeyController: increasing volume")
    self._settings.inc("_radio.volume")

  # --- decrease volume   -------------------------------------------------

  def radio_volume_down(self,unused):
    """ decrease volume """

    self._settings.log.msg("KeyController: decreasing volume")
    self._settings.dec("_radio.volume")

  # --- switch to next channel   ------------------------------------------

  def radio_next_channel(self,unused):
    """ switch to next channel """

    self._settings.log.msg("KeyController: changing to next channel")
    self._settings.inc("_radio.channel")

  # --- switch to previous channel   --------------------------------------

  def radio_prev_channel(self,unused):
    """ switch to previous channel """

    self._settings.log.msg("KeyController: changing to previous channel")
    self._settings.dec("_radio.channel")
