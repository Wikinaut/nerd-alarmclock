#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of KeyController - base class with operational functions
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, os, signal

class KeyController(object):
  """ Key controller """

  # initialize object   ----------------------------------------------------

  def init(self,settings):
    """ save some settings """

    self._settings   = settings
    self._stop_event = settings.stop_event

    # State of buttons. Note that this is not a globally shared variable.
    # But we just assume that nobody will mix IR-control with physical
    # button presses at the same time, so this should be "good enough".
    self._state  = "DEF"

    # mapping of buttons to methods
    self.METHODS = [
      # short-press
      { ('TOGGLE_RADIO','DEF'):  self.radio_toggle,
        ('NEXT_LIST','DEF'):     self.radio_next_channel_list,
        ('PREV_LIST','DEF'):     self.radio_prev_channel_list,
        ('BTN1',  'DEF'):        self.change_alarm_state,
        ('BTN2',  'DEF'):        self.change_alarm_state,
        ('BTN3',  'DEF'):        self.change_alarm_state,
        ('BTN4',  'DEF'):        self.change_alarm_state,
        ('SNZ',   'DEF'):        self.handle_snz,
        ('EK1_SW','DEF'):        self.radio_next_channel_list,
        ('EK2_SW','DEF'):        self.radio_toggle,

        # direkt functions (for IR-remote)
        ('INC_VOLUME', 'DEF'):   self.radio_volume_up,
        ('DEC_VOLUME', 'DEF'):   self.radio_volume_down,
        ('NEXT_CHANNEL', 'DEF'): self.radio_next_channel,
        ('PREV_CHANNEL', 'DEF'): self.radio_prev_channel,

        ('BTN1','OVL_BTN1'):     self.cycle_led_brightness,
        ('BTN2','OVL_BTN1'):     self.cycle_display_brightness,
        ('BTN3','OVL_BTN1'):     self.cycle_led_mode,
        ('BTN4','OVL_BTN1'):     self.cycle_display_mode,

        ('BTN1','OVL_BTN2'):     self.restart_service,
        ('BTN2','OVL_BTN2'):     self.reboot_system,
        ('BTN3','OVL_BTN2'):     self.shutdown_system,

        # direkt functions (for IR-remote)
        ('TOGGLE_LAMP','DEF'):        self.toggle_lamp,
        ('LED_BRIGHTNESS','DEF'):     self.cycle_led_brightness,
        ('LED_MODE','DEF'):           self.cycle_led_mode,
        ('DISPLAY_BRIGHTNESS','DEF'): self.cycle_display_brightness,
        ('RESTART','DEF'):            self.restart_service,
        ('REBOOT','DEF'):             self.reboot_system,
        ('SHUTDOWN','DEF'):           self.shutdown_system
        },
      # long press
      { ('BTN1','DEF'):          self.toggle_state,
        ('BTN1','OVL_BTN1'):     self.toggle_state,
        ('BTN2','DEF'):          self.toggle_state,
        ('BTN2','OVL_BTN2'):     self.toggle_state,
        ('BTN4','DEF'):          self.toggle_lights_off,
        ('SNZ','DEF'):           self.toggle_lamp
      }]

  # --- change alarm state   -----------------------------------------------

  def change_alarm_state(self,btn):
    """ change the state of the given alarm """

    nr = btn[-1]
    self._settings.log.msg("KeyController: changing state of alarm %s" % nr)

    old = self._settings.get("alarm."+nr+".state")

    if old == "disabled":
      new = "enabled"
    elif old == "enabled":
      new = "disabled"
    elif old in ["ringing","snooze"]:
      new = "enabled"

    self._settings.set("alarm."+nr+".state",new)

  # --- cylcle display brightness   ---------------------------------------

  def cycle_display_brightness(self,unused):
    """ cycle through display brightness levels """

    self._settings.log.msg("KeyController: changing display brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "display.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_brightness(self,unused):
    """ cycle through LED brightness levels """

    self._settings.log.msg("KeyController: changing led brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "led.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle display mode   ---------------------------------------------

  def cycle_display_mode(self,unused):
    """ cycle through display mode (future feature) """

    self._settings.log.msg("KeyController: changing display mode")

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_mode(self,unused):
    """ cycle through LED modes """

    self._settings.log.msg("KeyController: changing led mode")
    modes = self._settings.get("_led_modes")
    cur   = self._settings.get("led.mode")

    index = modes.index(cur)
    if index > len(modes)-2:
      index = 0
    else:
      index += 1

    new = modes[index]
    self._settings.log.msg("KeyController: new led mode: %s" % new)
    self._settings.set("led.mode",new)

  # --- process SNZ-key (either show display or start snooze)   ------------

  def handle_snz(self,unused):
    """ turn on display-brightness for a few seconds / start snooze"""

    # query if alarm is in progress -> start snooze
    nr = self._settings.get("_current_alarm")
    self._settings.log.msg("KeyController: current alarm: %r" % nr)
    if nr:
      self._settings.set("alarm.%s.state" % nr,"snooze")    # will trigger snooze
      return

    # else if radio is on: show channel
    if self._settings.get("_radio.state"):
      self._settings.set("_radio.show_channel",True)
      return

    # else: turn on display for two seconds
    old = self._settings.get("_display.brightness")
    if old == 0:
      self._settings.set("_display.brightness",3)
      time.sleep(2)
      self._settings.set("_display.brightness",old)

  # --- restart the systemd-service   --------------------------------------

  def restart_service(self,unused):
    """ restart the systemd-service """

    self._settings.log.msg("KeyController: restarting the clock")
    time.sleep(1)
    os.system("sudo /bin/systemctl restart nerd-alarmclock.service &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- reboot the system   ------------------------------------------------

  def reboot_system(self,unused):
    """ reboot the system-service """

    self._settings.log.msg("KeyController: rebooting the system")
    time.sleep(1)
    os.system("sudo /sbin/reboot &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- halt the system   --------------------------------------------------

  def shutdown_system(self,unused):
    """ shutdown the system-service """

    self._settings.log.msg("KeyController: initiating shutdown")
    time.sleep(1)
    os.system("sudo /sbin/halt &")
    os.kill(os.getpid(), signal.SIGINT)

  # --- toggle radio on or off   ------------------------------------------

  def radio_toggle(self,unused):
    """ toggle radio on or off """

    old_state = self._settings.get("_radio.state")
    new_state = not old_state
    self._settings.log.msg("KeyController: toggle radio state to %r" % new_state)
    self._settings.set("_radio.state", new_state)

  # --- switch to next channel list   -------------------------------------

  def radio_next_channel_list(self,unused):
    """ switch to next channel list """

    self._settings.log.msg("KeyController: switching to next channel list")
    self._settings.inc("_radio.list")

  # --- switch to previous channel list   ---------------------------------

  def radio_prev_channel_list(self,unused):
    """ switch to previous channel list """

    self._settings.log.msg("KeyController: switching to previous channel list")
    self._settings.dec("_radio.list")

  # --- increase volume   -------------------------------------------------

  def radio_volume_up(self,unused):
    """ increase volume """

    self._settings.log.msg("KeyController: increasing volume")
    self._settings.inc("_radio.volume")

  # --- decrease volume   -------------------------------------------------

  def radio_volume_down(self,unused):
    """ decrease volume """

    self._settings.log.msg("KeyController: decreasing volume")
    self._settings.dec("_radio.volume")

  # --- switch to next channel   ------------------------------------------

  def radio_next_channel(self,unused):
    """ switch to next channel """

    self._settings.log.msg("KeyController: changing to next channel")
    self._settings.inc("_radio.channel")

  # --- switch to previous channel   --------------------------------------

  def radio_prev_channel(self,unused):
    """ switch to previous channel """

    self._settings.log.msg("KeyController: changing to previous channel")
    self._settings.dec("_radio.channel")

  # --- toggle lamp on or off   -------------------------------------------

  def toggle_lamp(self,unused):
    """ toggle lamp on or off """

    old_state = self._settings.get("_led.lamp.state")
    if old_state:
      # turn off lamp
      self._settings.set("_led.lamp.state",False)
      # revert to previous led-mode
      prev_mode = self._settings.get("_led.mode.prev")
      self._settings.log.msg("KeyController: changing led-mode to %s" % prev_mode)
      self._settings.set("led.mode",prev_mode)
    else:
      # save current led-mode
      current_mode = self._settings.get("led.mode")
      self._settings.set("_led.mode.prev",current_mode)
      # switch to lamp-mode
      self._settings.log.msg("KeyController: changing led-mode to lamp")
      self._settings.set("led.mode","lamp",notify=False) # notify=False
      self._settings.set("_led.lamp.state",True)         # because of next line

  # --- toggle button state   ----------------------------------------------

  def toggle_state(self,btn):
    """ toggle state of buttons """

    self._settings.log.msg("KeyController: toggle_state() for button %s" % btn)
    # toggle overlay state
    if self._state == "DEF":
      self._state = "OVL_%s" % btn
      self._settings.set("_do_config","on")
      self._settings.log.msg("KeyController: changed state to %s" % self._state)
    elif self._state == ("OVL_%s" % btn):
      self._state = "DEF"
      self._settings.set("_do_config","off")
      self._settings.log.msg("KeyController: changed state to %s" % self._state)
    else:
      # this should not happen, so we ignore it
      self._settings.log.msg("KeyController: ignoring invalid state '%s'" %
                             self._state)

  # --- toggle lights off state   ------------------------------------------

  def toggle_lights_off(self,btn):
    """ toggle lights """

    self._settings.log.msg("KeyController: toggle_lights()")
    old = self._settings.get("_lights_off")
    self._settings.set("_lights_off",not old)
