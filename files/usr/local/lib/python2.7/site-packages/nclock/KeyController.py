#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of KeyController - base class with operational functions
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time

class KeyController(object):
  """ Key controller """

  # initialize object   ----------------------------------------------------

  def init(self,settings):
    """ save some settings """

    self._settings   = settings
    self._stop_event = settings.stop_event

  # --- change alarm state   -----------------------------------------------

  def change_alarm_state(self,btn):
    """ change the state of the given alarm """

    nr = btn[-1]
    self._settings.log.msg("KeyController: changing state of alarm %s" % nr)

    old = self._settings.get("alarm."+nr+".state")

    if old == "disabled":
      new = "enabled"
    elif old == "enabled":
      new = "disabled"
    elif old in ["ringing","snooze"]:
      new = "enabled"

    self._settings.set("alarm."+nr+".state",new)

  # --- cylcle display brightness   ---------------------------------------

  def cycle_display_brightness(self,unused):
    """ cycle through display brightness levels """

    self._settings.log.msg("KeyController: changing display brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "display.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_brightness(self,unused):
    """ cycle through LED brightness levels """

    self._settings.log.msg("KeyController: changing led brightness")
    mode = self._settings.get("_day_mode")
    cfg  = "led.brightness." + mode
    old = self._settings.get(cfg)
    new = ( old + 1) % 5
    self._settings.set(cfg,new)

  # --- cylcle display mode   ---------------------------------------------

  def cycle_display_mode(self,unused):
    """ cycle through display mode (future feature) """

    self._settings.log.msg("KeyController: changing display mode")

  # --- cylcle LED brightness   -------------------------------------------

  def cycle_led_mode(self,unused):
    """ cycle through LED mode (future feature) """

    self._settings.log.msg("KeyController: changing led mode")

  # --- process SNZ-key (either show display or start snooze)   ------------

  def handle_snz(self,unused):
    """ turn on display-brightness for a few seconds / start snooze"""

    # query if alarm is in progress -> start snooze
    if self._settings.get("_current_alarm"):
      self._settings.set("_snooze",True)    # will trigger snooze
      return

    # else: turn on display for two seconds
    old = self._settings.get("_display.brightness")
    if old == 0:
      self._settings.set("_display.brightness",3)
      time.sleep(2)
      self._settings.set("_display.brightness",old)
