#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of DisplayController - utility functions for the
# segment display.
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, threading, colorsys

simulate=False
try:
  import fourletterphat as display
except:
  # we assume our test-environment
  simulate=True

class DisplayController(object):
  """ Utility functions for the segment-display """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()

    # set display and brightness
    self._initialize()

    settings.add_settings_listener('display.brightness.day',self.on_brightness)
    settings.add_settings_listener('display.brightness.night',self.on_brightness)
    settings.add_settings_listener('alarm.1.state',self.on_alarm_state)
    settings.add_settings_listener('alarm.2.state',self.on_alarm_state)
    settings.add_settings_listener('alarm.3.state',self.on_alarm_state)
    settings.add_settings_listener('alarm.4.state',self.on_alarm_state)
    settings.add_timechange_listener(self.on_time)

  # --- initialize the display (brightness, time)   ------------------------

  def _initialize(self):
    """ Initialize time and brightness """

    # query and initialize alarms
    self._alarms = []
    for i in range(4):
      state = self._settings.get("alarm."+str(i+1)+".state")
      self._alarms.append(state != "disabled")

    # initialize time-display (including alarm-indicator)
    self._current_time = time.strftime("%Y:%m:%d %H:%M").split()
    self.set_time()

    day_start = self._settings.get("day.start")
    day_end   = self._settings.get("day.end")

    if day_start <= self._current_time and self._current_time <= day_end:
      self.set_brightness(self._settings.get("display.brightness.day"))
    else:
      self.set_brightness(self._settings.get("display.brightness.night"))

  # --- set the time   -----------------------------------------------------

  def set_time(self):
    """ show the current time on the display """
    t_string = self._current_time[1][0:2] + self._current_time[1][3:5]

    self._settings.log.msg("Setting time to: %s" % self._current_time[1])
    if not simulate:
      with self._lock:
        display.clear()
        display.print_str(t_string)
        display.show()

      for i in range(4):
        self._set_decimal(i,self._alarms[i])

  # --- set the brightness of the display   --------------------------------

  def set_brightness(self,value):
    """ Set the brightness of the display """
    # we only use off and four levels, so scale new appropriately
    self._settings.log.msg("Setting brightness to: %d" % value)
    if not simulate:
      with self._lock:
        display.set_brightness(min(4*value,15))
        display.show()

  # --- display a text for the given time   --------------------------------

  def show_text(self,text,duration=2,blink=True):
    if simulate:
      self._settings.log.msg("showing text: %s" % text)
      time.sleep(duration)
    else:
      with self._lock:
        display.clear()
        display.print_str(text)
        if blink:
          display.set_blink(display.HT16K33_BLINK_2HZ)
        display.show()
        time.sleep(duration)
        if blink:
          display.set_blink(display.HT16K33_BLINK_OFF)

      # now reset to old state
      self.set_time()

  # --- time change listener   ---------------------------------------------

  def scroll_text(self,text,duration=2):
    if simulate:
      self._settings.log.msg("scrolling text: %s" % text)
      time.sleep(duration)
    else:
      with self._lock:
        display.clear()
        display.scroll_text(text,duration)
        display.show()

      # now reset to old state
      self.set_time()

  # --- time change listener   ---------------------------------------------

  def on_time(self,old,new):
    """ process time-change events (update time)"""
    self._current_time = new
    self._settings.log.msg("DisplayController.on_time(%s,%s)" % (old,new))
    self.set_time()

  # --- brightness change listener   ---------------------------------------

  def on_brightness(self,name,old,new):
    """ process brightness-changes """

    self._settings.log.msg("DisplayController.on_brightness(%s,%s)" % (old,new))
    self.set_brightness(new)

  # --- alarm change listener   -------------------------------------------

  def on_alarm_state(self,name,old,new):
    """ process alarm changes: set or unset decimal """

    nr = int(name[6])
    self._settings.log.msg("Changing state of alarm %d from %s to %s" %
                           (nr,old,new))
    state = new != "disabled"
    index = nr-1
    self._alarms[index] = state      # keep state, so set_time works
    self._set_decimal(index,state)

  # --- set decimal   ------------------------------------------------------

  def _set_decimal(self,index,state):
    if not simulate:
      with self._lock:
        display.set_decimal(index,state)
        display.show()
    
