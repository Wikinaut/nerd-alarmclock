#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of DisplayController - utility functions for the
# segment display.
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, threading, colorsys

simulate=False
try:
  import fourletterphat as display
except:
  # we assume our test-environment
  simulate=True

class DisplayController(object):
  """ Utility functions for the segment-display """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()

    settings.add_settings_listener('display_brightness',self.on_brightness)
    settings.add_settings_listener('alarm',self.on_alarm)
    settings.add_timechange_listener(self.on_time)

  # --- display a text for the given time   --------------------------------

  def show_text(self,text,duration=2,blink=True):
    if simulate:
      self._settings.log.msg("showing text: %s" % text)
      time.sleep(duration)
    else:
      with self._lock:
        display.clear()
        display.print_str(text)
        if blink:
          display.set_blink(display.HT16K33_BLINK_2HZ)
        display.show()
        time.sleep(duration)

        # now reset to old state
        display.clear()
        display.print_str(self._current_time)
        if blink:
          display.set_blink(display.HT16K33_BLINK_OFF)
        display.show()
        
    
  # --- time change listener   ---------------------------------------------

  def scroll_text(self,text,duration=2):
    if simulate:
      self._settings.log.msg("scrolling text: %s" % text)
      time.sleep(duration)
    else:
      with self._lock:
        display.clear()
        display.scroll_text(text,duration)
        display.show()

        # now reset to old state
        display.clear()
        display.print_str(self._current_time)
        display.show()

  # --- time change listener   ---------------------------------------------

  def on_time(self,old,new):
    """ process time-change events (update time)"""
    self._current_time = new
    if simulate:
      self._settings.log.msg("DisplayController.on_time_changed(%s,%s)" % (old,new))
    else:
      t = new[0:2] + new[3:5]
      with self._lock:
        display.clear()
        display.print_str(t)
        display.show()

  # --- brightness change listener   ---------------------------------------

  def on_brightness(self,old,new):
    """ process brightness-changes """

    if simulate:
      self._settings.log.msg("DisplayController.on_time_changed(%s,%s)" % (old,new))
    else:
      # we only use off and four levels, so scale new appropriately
      with self._lock:
        display.set_brightness(min(4*new,15))
        display.show()

  # --- alarm change listener   -------------------------------------------

  def on_alarm(self,nr):
    """ process alarm changes: set or unset decimal """

    self._settings.log.msg("Change state of alarm %d" % nr)
    state = self._settings.alarms[nr].state
    if not simulate:
      with self._lock:
        display.set_decimal(nr-1,state)
        display.show()
