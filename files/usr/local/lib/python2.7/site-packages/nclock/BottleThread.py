# --------------------------------------------------------------------------
# Class definition of BottleThread - this thread controls the Bottle Framework
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import sys, os, json, signal, time
from threading import Thread

import bottle
from bottle import Bottle, WSGIRefServer, request
from wsgiref.simple_server import make_server

class Server(WSGIRefServer):
  """ Own Server object to gracefully shutdown server """

  def run(self, app): # pragma: no cover
    from wsgiref.simple_server import WSGIRequestHandler, WSGIServer
    from wsgiref.simple_server import make_server
    import socket

    class FixedHandler(WSGIRequestHandler):
        def address_string(self): # Prevent reverse DNS lookups please.
            return self.client_address[0]
        def log_request(*args, **kw):
            if not self.quiet:
                return WSGIRequestHandler.log_request(*args, **kw)

    handler_cls = self.options.get('handler_class', FixedHandler)
    server_cls  = self.options.get('server_class', WSGIServer)

    if ':' in self.host: # Fix wsgiref for IPv6 addresses.
        if getattr(server_cls, 'address_family') == socket.AF_INET:
            class server_cls(server_cls):
                address_family = socket.AF_INET6

    srv = make_server(self.host, self.port, app, server_cls, handler_cls)
    self.srv = srv
    srv.serve_forever()

  def stop(self):
    self.srv.shutdown()

def get_webroot(pgm):
  pgm_dir = os.path.dirname(os.path.realpath(pgm))
  return os.path.realpath(os.path.join(pgm_dir,"web"))

def get_webpath(web_root, path):
  return os.path.join(web_root, path)

class BottleThread(Thread):
  """ Bottle thread """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    super(BottleThread,self).__init__(name="BottleThread")
    self._settings = settings
    self._port = int(settings.get_value('WEB', 'port', '5000'))
    self._web_root = get_webroot(__file__)
    self._app = Bottle("BottleThread")
    self._add_rules()

    if settings.get_value('WEB', 'debug', '0') == '1':
      self._debug = True
      self._host = 'localhost'
    else:
      self._debug = False
      self._host = '0.0.0.0'

    self._server = Server(host=self._host, port=self._port)

  # add routing rules   ----------------------------------------------------

  def _add_rules(self):
    """ add routing rules """

    self._app.route("/", callback=self.main_page)
    self._app.route("/css/<filepath:path>", callback=self.css_pages)
    self._app.route("/js/<filepath:path>", callback=self.js_pages)
    self._app.route("/get_settings", callback=self.get_settings, method='GET')
    self._app.route("/save_settings", callback=self.save_settings, method='POST')

  def shutdown(self):
    """ shutdown server """

    self._server.stop()

  # run the thread   -------------------------------------------------------

  def run(self):
    """ run-method of thread """

    self._app.run(host=self._host, port=self._port, server=self._server, debug=self._debug, reloader=False)

  def css_pages(self, filepath):
    return bottle.static_file(filepath, root=get_webpath(self._web_root, 'css'))

  def js_pages(self, filepath):
    return bottle.static_file(filepath, root=get_webpath(self._web_root, 'js'))

  def main_page(self):
    tpl = bottle.SimpleTemplate(name="index.html",lookup=[self._web_root])
    return tpl.render()

  def get_settings(self):
    jsonobj = self._settings.get_jsonobj()
    bottle.response.content_type = 'application/json'
    return json.dumps(jsonobj)

  def save_settings(self):
    self._settings.set_from_jsonobj(json.loads(request.body.read()))
    return "Settings updated successfully!"
