# --------------------------------------------------------------------------
# Class definition of BottleThread - this thread controls the Bottle Framework
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import sys, os, json, signal, time
from threading import Thread

import bottle
from bottle import Bottle, WSGIRefServer, request, static_file
from wsgiref.simple_server import make_server

# --- helper class (server)   --------------------------------------------

class Server(WSGIRefServer):
  """ Own Server object to gracefully shutdown server """

  def run(self, app): # pragma: no cover
    from wsgiref.simple_server import WSGIRequestHandler, WSGIServer
    from wsgiref.simple_server import make_server
    import socket

    class FixedHandler(WSGIRequestHandler):
      def address_string(self): # Prevent reverse DNS lookups please.
        return self.client_address[0]
      def log_request(*args, **kw):
        if not self.quiet:
          return WSGIRequestHandler.log_request(*args, **kw)

    handler_cls = self.options.get('handler_class', FixedHandler)
    server_cls  = self.options.get('server_class', WSGIServer)

    if ':' in self.host: # Fix wsgiref for IPv6 addresses.
      if getattr(server_cls, 'address_family') == socket.AF_INET:
        class server_cls(server_cls):
          address_family = socket.AF_INET6

    srv = make_server(self.host, self.port, app, server_cls, handler_cls)
    self.srv = srv
    srv.serve_forever()

  def stop(self):
    self.srv.shutdown()

# --- thread running the server   ------------------------------------------

class BottleThread(Thread):
  """ Bottle thread """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    super(BottleThread,self).__init__(name="BottleThread")
    self._settings = settings
    if settings.get_value('WEB', 'debug', '0') == '1':
      self._debug = True
      self._host = 'localhost'
    else:
      self._debug = False
      self._host = settings.get_value('WEB', 'host', '0.0.0.0')
    self._port = int(settings.get_value('WEB', 'port', '5000'))
    self._web_root = settings.get_value('WEB',
                                        'root', '/var/lib/nerd-alarmclock/web')
    self._app = Bottle("BottleThread")
    self._add_rules()

    self._server = Server(host=self._host, port=self._port)

  # --- query path   -------------------------------------------------------

  def _get_webpath(self,web_root, path):
    """ return webpath """
    return os.path.join(web_root, path)

  # add routing rules   ----------------------------------------------------

  def _add_rules(self):
    """ add routing rules """

    self._app.route("/", callback=self.main_page)
    self._app.route("/favicon.ico", callback=self.get_favicon_ico, method='GET')
    self._app.route("/favicon.png", callback=self.get_favicon_png, method='GET')
    self._app.route("/pic/<filepath:path>", callback=self.get_pic)
    self._app.route("/css/<filepath:path>", callback=self.css_pages)
    self._app.route("/js/<filepath:path>", callback=self.js_pages)
    self._app.route("/globals/read", callback=self.get_globals, method='GET')
    self._app.route("/alarms/read", callback=self.get_alarms, method='GET')
    self._app.route("/radio/read", callback=self.get_radio, method='GET')
    self._app.route("/globals/save", callback=self.save_globals, method='POST')
    self._app.route("/alarms/save", callback=self.save_alarms, method='POST')
    self._app.route("/radio/save", callback=self.save_radio, method='POST')
    self._app.route("/lists/read", callback=self.get_lists, method='GET')

  # --- static css-pages   ----------------------------------------------------

  def css_pages(self, filepath):
    return bottle.static_file(filepath,
                              root=self._get_webpath(self._web_root, 'css'))

  # --- static js-pages   ---------------------------------------------------

  def js_pages(self, filepath):
    return bottle.static_file(filepath,
                              root=self._get_webpath(self._web_root, 'js'))

  # --- static pics   -------------------------------------------------------

  def get_pic(self, filepath):
    return bottle.static_file(filepath,
                              root=self._get_webpath(self._web_root, 'pic'))

  # --- return favicon as ico   --------------------------------------------

  def get_favicon_ico(self):
    return static_file('favicon.ico',root=self._web_root)

  # --- return favicon as png   --------------------------------------------

  def get_favicon_png(self):
    return static_file('favicon.png',root=self._web_root)

  # --- main page   --------------------------------------------------------

  def main_page(self):
    tpl = bottle.SimpleTemplate(name="index.html",lookup=[self._web_root])
    return tpl.render()

  # --- shutdown the server   -----------------------------------------------

  def shutdown(self):
    """ shutdown server """
    self._server.stop()

  # run the thread   -------------------------------------------------------

  def run(self):
    """ run-method of thread """

    self._app.run(host=self._host, port=self._port,
                     server=self._server, debug=self._debug, reloader=False)

  # --- return lists (alarms, sounds, etc.)   ------------------------------

  def get_lists(self):
    """ return lists for select-options """

    lists = {}
    lists['led_modes']      = self._settings.get("_led_modes")
    lists['led_alarms']     = self._settings.get("_led_alarms")
    lists['display_modes']  = self._settings.get("_display_modes")
    lists['display_alarms'] = self._settings.get("_display_alarms")
    lists['sound_alarms']   = self._settings.get("_sound_alarms")
    lists['channel_lists']  = self._settings.get("_radio_channel_lists")
    lists['channels']       = self._settings.get("_radio_channels")
    bottle.response.content_type = 'application/json'
    return json.dumps(lists)

  # --- return global settings   -------------------------------------------

  def get_globals(self):
    """ return global settings """
    s_global = self._settings.get_jsonobj(select=self._settings.S_GLOBAL)
    self._settings.log.msg("BottleThread: get_globals: %r" % s_global)
    bottle.response.content_type = 'application/json'
    return json.dumps(s_global)

  # --- return radio settings   --------------------------------------------

  def get_radio(self):
    """ return radio settings """
    s_radio = self._settings.get_jsonobj(select=self._settings.S_RADIO)
    self._settings.log.msg("BottleThread: get_radio: %r" % s_radio)
    bottle.response.content_type = 'application/json'
    return json.dumps(s_radio)

  # --- return alarm settings as array -------------------------------------

  def get_alarms(self):
    s_alarms = self._settings.get_jsonobj(select=self._settings.S_ALARMS)
    self._settings.log.msg("BottleThread: get_alarms: %r" % s_alarms)
    # reorder to an array
    alarms = [{} for i in range(self._settings.MAX_ALARMS)]
    keys = s_alarms.keys()
    for key in keys:
      token = key.split('.')   # key = alarm.nr.xxx
      nr = int(token[1]) - 1
      alarms[nr][token[0]+'.'+'.'.join(token[2:])] = s_alarms[key]
    self._settings.log.msg("BottleThread: get_alarms: %r" % alarms)
    bottle.response.content_type = 'application/json'
    return json.dumps(alarms)

  # --- save global settings   ---------------------------------------------

  def save_globals(self):
    self._save_settings(json.loads(request.body.read()))
    return "Settings updated successfully!"

  # --- save radio settings   ----------------------------------------------

  def save_radio(self):
    self._save_settings(json.loads(request.body.read()))
    return "Settings updated successfully!"

  # --- save alarm settings   ----------------------------------------------

  def save_alarms(self):
    # TODO: flatten array before saving
    #self._save_settings(json.loads(request.body.read()))
    return "Settings updated successfully!"

  # --- save changed settings   --------------------------------------------

  def _save_settings(self,obj):
    """ save change settings """
    self._settings.log.msg("BottleThread: save_settings")

    keys = obj.keys()
    for name in keys:
      old_value = self._settings.get(name)
      value = obj[name]
      if old_value != value:
        self._settings.set(name,value)
