# --------------------------------------------------------------------------
# Class definition of FlaskThread - this thread controls the Flask Framework
#
# Author: Benjamin Fuchs
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

from threading import Thread
from flask import Flask, request
from flask.views import MethodView
import requests

class FlaskThread(Thread):
  """ Flask thread """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings, port):
    """ Constructor """
    super(FlaskThread,self).__init__(name="FlaskThread")
    self._settings = settings
    self._port = port
    self._debug = settings.get_value('WEB', 'debug', '0')
    self._app = Flask("FlaskThread")
    self._app.add_url_rule("/time", view_func=TimeAPI.as_view('time',self._settings))
    self._app.add_url_rule("/shutdown", view_func=ShutdownAPI.as_view('shutdown', self._settings))

  def run(self):
    if self._debug == '1':
        self._app.run(debug=True, use_reloader=False, port=int(self._port))
    else:
        self._app.run(host='0.0.0.0', use_reloader=False, port=int(self._port))

class TimeAPI(MethodView):
  """ Time API """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    self._settings   = settings

  def post(self):
    """ handle post requests """

    self._settings.log.msg("WebThread: /time")
    cfg  = "alarm.1.time"
    self._settings.set(cfg,request.form['time'])
    return "Time updated successfully!"

class ShutdownAPI(MethodView):
  """ Shutdown API """

  # initialize object   ----------------------------------------------------

  def __init__(self, settings):
    """ Constructor """

    self._settings   = settings

  def post(self):
    """ handle post requests """

    self._settings.log.msg("WebThread: /shutdown")
    func = request.environ.get('werkzeug.server.shutdown')
    if func is None:
        raise RuntimeError('Not running with the Werkzeug Server')
    func()
    return "Shutting down ..."
