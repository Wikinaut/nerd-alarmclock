#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of SoundController - utility functions for sound output.
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, threading, colorsys, json

class SoundController(object):
  """ Utility functions for sound output """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()

    settings.add_alarm_provider(self.get_alarm)

    # save list of alarms in settings
    alarms = []
    for method in dir(self):
      if method.startswith("alarm_"):
        alarms.append(method[6:])
    settings.set("_sound_alarms",alarms)

  # --- get runnable alarm   -----------------------------------------------

  def get_alarm(self,nr,alarm):
    """ return runnable alarm """

    self._settings.log.msg("SoundController: creating alarm-thread for alarm %s" % nr)

    # query alarm-settings
    try:
      cfg = json.loads(self._settings.get("alarm.%s.sound" % nr))
    except:
      cfg = self._settings.get("alarm.%s.sound" % nr,deep=True)

    if not cfg.has_key('name') or not cfg['name']:
      return None

    alarm_func=getattr(self,"alarm_"+cfg['name'])
    del cfg['name']

    # return alarm
    t = threading.Thread(target=alarm_func,args=(alarm.event,),kwargs=cfg)
    return t

