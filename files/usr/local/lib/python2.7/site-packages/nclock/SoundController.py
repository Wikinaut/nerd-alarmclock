#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of SoundController - utility functions for sound output.
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import os, time, threading, json

try:
  import pygame
  simulate=False
except:
  # we assume our test-environment
  simulate=True

class SoundController(object):
  """ Utility functions for sound output """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()
    settings.add_alarm_provider(self.get_alarm)
    settings.set("_sound_alarms",self._get_sounds())

  # --- initialize alarms   ------------------------------------------------

  def _get_sounds(self):
    sounds_default = os.path.join(os.path.expanduser("~"),"sounds")
    sound_dir      = self._settings.get_value('GLOBAL','sounds',sounds_default)

    if not os.path.isdir(sound_dir):
      return []

    sounds = []
    for f in os.listdir(sound_dir):
      if not os.path.join(sound_dir,f).isfile():
        continue
      else:
        sounds.append(f)
    return sounds.sort()

  # --- get runnable alarm   -----------------------------------------------

  def get_alarm(self,nr,alarm):
    """ return runnable alarm """

    self._settings.log.msg("SoundController: creating alarm-thread for alarm %s" % nr)

    # query alarm-settings
    try:
      cfg = json.loads(self._settings.get("alarm.%s.sound" % nr))
    except:
      cfg = self._settings.get("alarm.%s.sound" % nr,deep=True)

    if not cfg.has_key('name') or not cfg['name']:
      return None

    # return alarm
    t = threading.Thread(target=self.play_sound,args=(alarm.event,),kwargs=cfg)
    return t

  # --- play a given sound   ------------------------------------------------

  def play_sound(self,stop_me,name=None,duration=10,volume=40):
    """ play a given sound for the given duration """

    duration = int(duration)
    volume   = int(volume)

    self._settings.log.msg("SoundController: playing %s for %s minutes" %
                           (name,duration))

    start_time = time.time()
    end_time   = start_time + 60*duration
    now        = start_time

    if simulate:
      stop_me.wait(60*duration)
    else:
      with self._lock:
        # set volume
        # ...

        # start playing sound
        # ....

        while now <= end_time:
          if stop_me.wait(1.0):
            break
          now = time.time()

        # stop playing sound
        # ...
