#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of BotThread - a telegram bot to control the clock
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import ConfigParser, traceback, re, os, signal, json, pprint
from threading import Thread

import telepot
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
from telepot.exception import TelegramError

class BotThread(Thread):
  """ telegram bot thread """

  # constants   ------------------------------------------------------------

  POLL_SHORT = 0.1
  POLL_LONG  = 15

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    
    super(BotThread,self).__init__(name="BotThread")
    self._settings   = settings
    self._stop_event = settings.stop_event
    self._bot_id     = settings.config_parser.get("BOT","bot_id")
    self._user_id    = settings.config_parser.getint("BOT","user_id")

    # handler
    self._handler = [
      (re.compile("/start"),self._do_start),
      (re.compile("/help"),self._do_help),
      (re.compile("/settings"),self._do_settings),
      (re.compile("/restart"),self._do_restart),
      (re.compile("/reboot"),self._do_reboot),
      (re.compile("/shutdown"),self._do_shutdown),
      (re.compile(".*neustart.*",re.I),self._do_reboot),
      (re.compile("/alarm"),self._do_set_alarm),
      (re.compile(".*weck.*",re.I),self._do_set_alarm)
    ]

    # create bot
    self._bot = telepot.Bot(self._bot_id)

  # handler for /start   ---------------------------------------------------

  def _do_start(self,chat_id,text):
    """ process the /start command """

    response = (
      "Hi Bernhard,\n"
      "this is your NerdClockController.\n\n"
      "What can I do for you?"
      )
    self._bot.sendMessage(chat_id,response)
    
  # handler for /help   ----------------------------------------------------

  def _do_help(self,chat_id,text):
    """ process the /help command """

    response = (
      "Hi Bernhard,\n"
      "use /settings to see the current settings,\n"
      "use /reboot to reboot the system,\n"
      "use /shutdown to shutdown the system,\n"
      "use /alarm to set alarm-attributes."
      )
    self._bot.sendMessage(chat_id,response)

  # handler for /settings   ------------------------------------------------

  def _do_settings(self,chat_id,text):
    """ process the /settings command """
    self._settings.log.msg("processing /settings")
    self._bot.sendMessage(chat_id,"sorry, not implemented yet!")

  # handler for /rstart   --------------------------------------------------

  def _do_restart(self,chat_id,text):
    """ process the /restart command """
    self._settings.log.msg("processing /restart")
    self._bot.sendMessage(chat_id,"sorry, not implemented yet!")

  # handler for /reboot   --------------------------------------------------

  def _do_reboot(self,chat_id,text):
    """ process the /reboot command """
    self._settings.log.msg("processing /reboot")
    keyboard = InlineKeyboardMarkup(
      inline_keyboard=[
        [InlineKeyboardButton(text='No',
                              callback_data='{"name":"reboot", "value": "no"}'),
         InlineKeyboardButton(text='Yes',
                              callback_data='{"name":"reboot", "value": "yes"}'),
         ],
        ])
    self._do_reboot = True     # keep state
    self._bot.sendMessage(chat_id,"Really reboot?",reply_markup=keyboard)

  # callback-handler for /reboot   -----------------------------------------

  def _do_reboot_callback(self,query_id,chat_id,value):
    """ callback-handler for the /reboot command """

    # prevent multiple use of the keyboard
    if not self._do_reboot:
      # ignore repeated keyboard press
      self._bot.answerCallbackQuery(query_id,"keyboards are one-time use!",
                                    show_alert=True)
      return
    else:
      self._do_reboot = False

    if value == 'no':
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,"canceled reboot")
    else:
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,"rebooting the system")
      os.system("sudo /sbin/reboot &")
      os.kill(os.getpid(), signal.SIGINT)

  # handler for /shutdown   ------------------------------------------------

  def _do_shutdown(self,chat_id,text):
    """ process the /shutdown command """
    self._settings.log.msg("processing /shutdown")
    self._bot.sendMessage(chat_id,"sorry, not implemented yet!")

  # handler for setting the alarm   ----------------------------------------

  def _do_set_alarm(self,chat_id,text):
    """ process the /alarm command """
    self._settings.log.msg("processing set_alarm")
    self._bot.sendMessage(chat_id,"sorry, not implemented yet!")

  # fallback handler for unknown commands   --------------------------------

  def _do_fallback(self,chat_id,text):
    """ process unhandled messages """
    self._settings.log.msg("cannot interpret %s" % text)
    response = "sorry, but I don't understand '%s'" % text
    self._bot.sendMessage(chat_id,response)

  # handle updates from telegram   -----------------------------------------

  def _handle_updates(self,update):
    """ handle updates from telegram. This is only a multiplexer method """

    if update.has_key('message'):
      self._handle_message(update['message'])
    else:
      self._handle_callback(update['callback_query'])

  # handle text messages   ------------------------------------------------

  def _handle_message(self,msg):
    """ handle objects of type message from telegram """
    chat = msg['chat']
    content_type, chat_type, chat_id = telepot.glance(msg)
    if content_type != 'text':
      return

    # we only support private text messages and only messages from self._user_id
    if chat['type'] != "private" or msg['from']['id'] != self._user_id:
      self._settings.log.msg("ignoring message (wrong type of id)")
      return

    # do some text analysis and pass messages to handlers
    text = msg['text']
    for (regex,handler) in self._handler:
      if regex.match(text):
        handler(chat_id,text)
        return
    self._do_fallback(chat_id,text)

  # handle callbacks   ----------------------------------------------------

  def _handle_callback(self,query):
    """ handle objects of type callback_query from telegram """

    if query['from']['id'] != self._user_id:
      self._settings.log.msg("ignoring message (wrong id)")
      return

    query_id      = query['id']
    chat_id       = query['message']['chat']['id']
    callback_data = query['data']
    self._settings.log.msg("callback_data: %s" % callback_data)

    # extract and call callback-function
    cinfo = json.loads(callback_data)
    func_name = "_do_%s_callback" % cinfo['name']
    if hasattr(self,func_name):
      self._settings.log.msg("executing %s(%s)" % (func_name,cinfo['value']))
      func = getattr(self,func_name)
      func(query_id,chat_id,cinfo['value'])
    else:
      self._settings.log.msg("method %s not found" % func_name)

  # run the thread   -------------------------------------------------------

  def run(self):
    self._settings.log.msg("running BotThread")
    offset = None

    # start configuration of poll-timeouts
    poll_event    = BotThread.POLL_SHORT
    poll_telegram = BotThread.POLL_LONG

    while not self._stop_event.wait(poll_event):
      self._settings.log.msg("polling telegram ...")
      try:
        result = self._bot.getUpdates(offset=offset,
                                      timeout=poll_telegram)

        if len(result) > 0:
          # No sort. Trust server to give messages in correct order.
          for update in result:
            offset = update['update_id'] + 1
            self._handle_updates(update)

        # reset timeouts to standard
        poll_event    = BotThread.POLL_SHORT
        poll_telegram = BotThread.POLL_LONG

      except TelegramError as e:
        if e.error_code == 404:
          # wrong bot-id??
          self._settings.log.msg("received 404 - not found. Wrong bot-ID?")
          break
        else:
          self._settings.log.msg(traceback.format_exc())
          # swap timeouts, since something is going wrong
          poll_event    = BotThread.POLL_LONG
          poll_telegram = BotThread.POLL_SHORT

      except:
        self._settings.log.msg(traceback.format_exc())
        # swap timeouts, since something is going wrong
        poll_event    = BotThread.POLL_LONG
        poll_telegram = BotThread.POLL_SHORT

    self._settings.log.msg("terminating BotThread")
