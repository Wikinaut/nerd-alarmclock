#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of BotThread - a telegram bot to control the clock
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import ConfigParser, pprint, traceback, re
from threading import Thread

import telepot

class BotThread(Thread):
  """ telegram bot thread """

  # constants   ------------------------------------------------------------

  POLL_INTERVAL  = 0.1
  UPDATE_TIMEOUT = 5

  # initialize object   ----------------------------------------------------

  def __init__(self,parser,stopEvent):
    """ Constructor """
    
    super(BotThread,self).__init__(name="BotThread")
    self.__stopEvent = stopEvent
    self.__botId     = parser.get("BOT","bot_id")
    self.__userId    = parser.getint("BOT","user_id")

    # handler
    self.__handler = [
      (re.compile("/start"),self._do_start),
      (re.compile("/reboot"),self._do_reboot),
      (re.compile(".*neustart.*",re.I),self._do_reboot),
      (re.compile("/alarm"),self._do_set_alarm),
      (re.compile(".*weck.*",re.I),self._do_set_alarm)
    ]

    # create bot
    self.__bot = telepot.Bot(self.__botId)

  # handler for /start   ---------------------------------------------------

  def _do_start(self,chat_id,text):
    """ process the /start command """

    response = (
      "Hi Bernhard,\n"
      "this is your NerdClockController.\n\n"
      "What can I do for you?"
      )
    self.__bot.sendMessage(chat_id,response)
    
  # handler for /reboot   --------------------------------------------------

  def _do_reboot(self,chat_id,text):
    print "processing /reboot"
    
  # handler for setting the alarm   ----------------------------------------

  def _do_set_alarm(self,chat_id,text):
    print "processing set_alarm"
    
  # handle updates from telegram   -----------------------------------------

  def _handle_updates(self,update):
    """ handle updates from telegram. This is only a multiplexer method """

    # we only support private text messages and only messages from self.__userId
    chat = update['message']['chat']
    if chat['type'] != "private" or chat['id'] != self.__userId:
      return
    else:
      msg = update['message']
      content_type, chat_type, chat_id = telepot.glance(msg)
      if content_type != 'text':
        return

    # do some text analysis and pass messages to handlers
    text = msg['text']
    for (regex,handler) in self.__handler:
      if regex.match(text):
        handler(chat_id,text)
        return
    print "no handler for %s" % text

  # run the thread   -------------------------------------------------------

  def run(self):
    print "running BotThread"
    offset = None
    while not self.__stopEvent.wait(BotThread.POLL_INTERVAL):
      print "polling ..."
      try:
        result = self.__bot.getUpdates(offset=offset,
                                      timeout=BotThread.UPDATE_TIMEOUT)

        if len(result) > 0:
          # No sort. Trust server to give messages in correct order.
          for update in result:
            self._handle_updates(update)
            offset = update['update_id'] + 1

      except telepot.exception.BadHTTPResponse as e:
        traceback.print_exc()
        # Servers probably down. Wait longer.
        if e.status == 502:
          time.sleep(30)

      except:
        traceback.print_exc()

    print "terminating BotThread"
