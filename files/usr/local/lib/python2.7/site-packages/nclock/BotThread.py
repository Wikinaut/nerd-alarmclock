#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of BotThread - a telegram bot to control the clock
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import datetime, time, ConfigParser, traceback, re, os, signal, json, pprint
from threading import Thread

import telepot
from telepot.namedtuple import InlineKeyboardMarkup, InlineKeyboardButton
from telepot.exception import TelegramError

import gettext
_locale_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)),'locale')
_ = gettext.translation('nclock',_locale_dir,fallback=True).ugettext

# --- Helper object (value holder for alarm-attributes)   ------------------

class Alarm(object):
  """ Value-holder for alarm attributes """

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings

  def read(self,nr):
    """ Read alarm-attributes """
    self.nr          = nr
    self.state       = self._settings.get("alarm.%s.state"     % nr)
    self.time        = self._settings.get("alarm.%s.time"      % nr)
    self.snooze      = self._settings.get("alarm.%s.snooze"    % nr)
    self.days        = self._settings.get("alarm.%s.days"      % nr)
    self.led_cfg     = self._settings.get("alarm.%s.led"       % nr)
    self.sound_cfg   = self._settings.get("alarm.%s.sound"     % nr)
    self.disp_cfg    = self._settings.get("alarm.%s.display"   % nr)
    self.led         = self.led_cfg['name']
    self.led_dur     = self.led_cfg['duration']
    self.led_delay   = (str(self.led_cfg['delay'])
                        if self.led_cfg.has_key('delay') else "0")
    self.sound       = self.sound_cfg['name']
    self.sound_dur   = self.sound_cfg['duration']
    self.sound_delay = (str(self.sound_cfg['delay'])
                        if self.sound_cfg.has_key('delay') else "0")
    self.vol         = self.sound_cfg['volume']
    self.fadein      = self.sound_cfg['fadein']

# --- Thread running the telegram bot   ------------------------------------

class BotThread(Thread):
  """ telegram bot thread """

  # constants   ------------------------------------------------------------

  POLL_SHORT = 0.1
  POLL_LONG  = 15

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    
    super(BotThread,self).__init__(name="BotThread")
    self._settings   = settings
    self._stop_event = settings.stop_event
    self._bot_id     = settings.config_parser.get("BOT","bot_id")
    self._user_id    = settings.config_parser.getint("BOT","user_id")

    # handler
    self._handler = [
      (re.compile("/start"),self._do_start),
      (re.compile("/help"),self._do_help),
      (re.compile("/settings"),self._do_settings),
      (re.compile("/restart"),self._do_restart),
      (re.compile("/reboot"),self._do_reboot),
      (re.compile("/shutdown"),self._do_shutdown),
      (re.compile(".*neustart.*",re.I),self._do_reboot),
      (re.compile("/alarm"),self._do_set_alarm),
      (re.compile(".*weck.*",re.I),self._do_set_alarm)
    ]

    # create bot
    self._bot = telepot.Bot(self._bot_id)

  # handler for /start   ---------------------------------------------------

  def _do_start(self,chat_id,text):
    """ process the /start command """

    response = _(
      "Hi Bernhard,\n"
      "this is your NerdClockController.\n\n"
      "What can I do for you?"
      )
    self._bot.sendMessage(chat_id,response)
    
  # handler for /help   ----------------------------------------------------

  def _do_help(self,chat_id,text):
    """ process the /help command """

    response = _(
      "Hi Bernhard,\n"
      "use /settings to see the current settings,\n"
      "use /restart to restart the clock,\n"
      "use /reboot to reboot the system,\n"
      "use /shutdown to shutdown the system,\n"
      "use /alarm to set alarm-attributes."
      )
    self._bot.sendMessage(chat_id,response)

  # handler for /settings   ------------------------------------------------

  def _do_settings(self,chat_id,text):
    """ process the /settings command """

    self._settings.log.msg("BotThread: processing /settings")
    # send a keyboard with a button for each alarm
    alarm_select = self._get_alarm_keyboard("settings")
    glob_select  = [InlineKeyboardButton(text=_("Global"),
                    callback_data='{"name":"settings", "value": "global"}')]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[glob_select,alarm_select])
    self._bot.sendMessage(chat_id,_("Select settings"),reply_markup=keyboard)

  # callback-handler for /settings   ---------------------------------------

  def _do_settings_callback(self,query_id,chat_id,value):
    """ callback-handler for the /settings command """

    self._settings.log.msg("BotThread: selected alarm: %s" % value)
    self._bot.answerCallbackQuery(query_id)

    if value == "global":
      response = _(
        "day start:                  %s\n"
        "day end:                    %s\n"
        "LED-mode:                   %s\n"
        "LED-brightness (day):       %s\n"
        "LED-brightness (night):     %s\n"
        "display-mode:               %s\n"
        "display-brightness (day):   %s\n"
        "display-brightness (night): %s\n"
        ) % (self._settings.get("day.start"),
             self._settings.get("day.end"),
             self._settings.get("led.mode"),
             self._settings.get("led.brightness.day"),
             self._settings.get("led.brightness.night"),
             self._settings.get("display.mode"),
             self._settings.get("display.brightness.day"),
             self._settings.get("display.brightness.night"))
    else:
      # read alarm attributes of selected alarm
      alarm = Alarm(self._settings)
      alarm.read(value)
      self._alarm = alarm

      if alarm.sound == "_radio":
        sound = _("radio (current channel)")
      else:
        sound = alarm.sound

      # send settings
      response = _(
        "Alarm:     %s,\n"
        " state:    %s\n"
        " time:     %s\n"
        " snooze:   %s\n"
        " days:     %s\n"
        " LED:      %s (duration: %s, delay: %s)\n"
        " display:  %s\n"
        " sound:    %s (duration: %s, delay: %s)\n"
        " volume:   %s\n"
        " fadein:   %s\n"
        ) % (value,
             _(alarm.state),
             alarm.time,
             alarm.snooze,
             alarm.days,
             alarm.led, alarm.led_dur, alarm.led_delay,
             alarm.disp_cfg["name"],
             sound, alarm.sound_dur, alarm.sound_delay,
             alarm.vol,
             alarm.fadein)
    self._bot.sendMessage(chat_id,response)

  # handler for /restart   -------------------------------------------------

  def _do_restart(self,chat_id,text):
    """ process the /restart command """

    self._settings.log.msg("BotThread: processing /restart")
    self._do_restart = True
    self._bot.sendMessage(chat_id,_("Really restart?"),
                          reply_markup=self._yesno_keyboard("restart"))

  # callback-handler for /restart   ----------------------------------------

  def _do_restart_callback(self,query_id,chat_id,value):
    """ callback-handler for the /restart command """

    # prevent multiple use of the keyboard
    if not self._do_restart:
      # ignore repeated keyboard press
      self._bot.answerCallbackQuery(query_id,_("invalid use!"),
                                    show_alert=True)
      return
    else:
      self._do_restart = False

    if value == 'no':
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("canceled restart"))
    else:
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("restarting the clock"))
      time.sleep(1)
      os.system("sudo /bin/systemctl restart nerd-alarmclock.service &")
      os.kill(os.getpid(), signal.SIGINT)

  # handler for /reboot   --------------------------------------------------

  def _do_reboot(self,chat_id,text):
    """ process the /reboot command """

    self._settings.log.msg("BotThread: processing /reboot")
    self._do_reboot = True
    self._bot.sendMessage(chat_id,_("Really reboot?"),
                          reply_markup=self._yesno_keyboard("reboot"))

  # callback-handler for /reboot   -----------------------------------------

  def _do_reboot_callback(self,query_id,chat_id,value):
    """ callback-handler for the /reboot command """

    # prevent multiple use of the keyboard
    if not self._do_reboot:
      # ignore repeated keyboard press
      self._bot.answerCallbackQuery(query_id,_("invalid use!"),
                                    show_alert=True)
      return
    else:
      self._do_reboot = False

    if value == 'no':
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("canceled reboot"))
    else:
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("rebooting the system"))
      time.sleep(1)
      os.system("sudo /sbin/reboot &")
      os.kill(os.getpid(), signal.SIGINT)

  # handler for /shutdown   ------------------------------------------------

  def _do_shutdown(self,chat_id,text):
    """ process the /shutdown command """

    self._settings.log.msg("BotThread: processing /shutdown")
    self._do_shutdown = True
    self._bot.sendMessage(chat_id,_("Really shutdown?"),
                          reply_markup=self._yesno_keyboard("shutdown"))

  # callback-handler for /shutdown   ---------------------------------------

  def _do_shutdown_callback(self,query_id,chat_id,value):
    """ callback-handler for the /shutdown command """

    # prevent multiple use of the keyboard
    if not self._do_shutdown:
      # ignore repeated keyboard press
      self._bot.answerCallbackQuery(query_id,_("invalid use!"),
                                    show_alert=True)
      return
    else:
      self._do_shutdown = False

    if value == 'no':
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("canceled shutdown"))
    else:
      self._bot.answerCallbackQuery(query_id)
      self._bot.sendMessage(chat_id,_("shutting down the system"))
      time.sleep(1)
      os.system("sudo /sbin/halt &")
      os.kill(os.getpid(), signal.SIGINT)

  # handler for setting the alarm   ----------------------------------------

  def _do_set_alarm(self,chat_id,text):
    """ process the /alarm command """
    self._settings.log.msg("BotThread: processing set_alarm")

    # send a keyboard with a button for each alarm
    buttons  = self._get_alarm_keyboard("alarm_attr")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    self._bot.sendMessage(chat_id,_("Select alarm"),reply_markup=keyboard)

  # select alarm attribute callback   ----------------------------------------

  def _do_alarm_attr_callback(self,query_id,chat_id,value):
    """ process alarm attribute selection """

    self._settings.log.msg("BotThread: selected alarm: %s" % value)
    self._bot.answerCallbackQuery(query_id)

    # read alarm attributes
    alarm = Alarm(self._settings)
    alarm.read(value)
    self._alarm = alarm

    # create keyboard
    buttons = []
    button = [InlineKeyboardButton(text=_("state: %s") % _(alarm.state),
                     callback_data='{"name":"alarm_state", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("time: %s") % alarm.time,
                      callback_data='{"name":"alarm_time", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("snooze: %s") % alarm.snooze,
                      callback_data='{"name":"alarm_snooze", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("days: %s") % alarm.days,
                      callback_data='{"name":"alarm_days", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("LED: %s") % alarm.led,
                      callback_data='{"name":"alarm_leds", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("duration: %s") % alarm.led_dur,
                       callback_data='{"name":"alarm_led_dur", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("delay: %s") % alarm.led_delay,
                       callback_data='{"name":"alarm_led_delay", "value": ""}')]
    buttons.append(button)
    if alarm.sound == "_radio":
      button = [InlineKeyboardButton(
        text=_("Sound: %s") % _("radio (current channel)"),
                      callback_data='{"name":"alarm_sounds", "value": ""}')]
    else:
      button = [InlineKeyboardButton(text=_("Sound: %s") % alarm.sound,
                      callback_data='{"name":"alarm_sounds", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("duration: %s") % alarm.sound_dur,
                       callback_data='{"name":"alarm_sound_dur", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("delay: %s") % alarm.sound_delay,
                       callback_data='{"name":"alarm_sound_delay", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("volume: %s") % alarm.vol,
                       callback_data='{"name":"alarm_vol", "value": ""}')]
    buttons.append(button)
    button = [InlineKeyboardButton(text=_("fadein: %s") % alarm.fadein,
                       callback_data='{"name":"alarm_fadein", "value": ""}')]
    buttons.append(button)

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    self._bot.sendMessage(chat_id,_("Select attribute"),reply_markup=keyboard)

  # set alarm state callback   -------------------------------------------

  def _do_alarm_state_callback(self,query_id,chat_id,value):
    """ set alarm state """

    self._settings.log.msg("BotThread: setting alarm state.")
    self._bot.answerCallbackQuery(query_id)

    if value:
      # set value of alarm-state
      self._alarm.state = value
      self._settings.set("alarm.%s.state" % self._alarm.nr,value)
    else:
      # show keyboard
      buttons = [[InlineKeyboardButton(text=_("enable"),
                   callback_data='{"name":"alarm_state", "value": "enabled"}')],
               [InlineKeyboardButton(text=_("disable"),
                   callback_data='{"name":"alarm_state", "value": "disabled"}')]
              ]
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Change state of alarm"),reply_markup=keyboard)

  # set alarm time callback   --------------------------------------------

  def _do_alarm_time_callback(self,query_id,chat_id,value):
    """ set alarm time """

    self._settings.log.msg("BotThread: setting alarm time")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.time_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [':','0','ok']
      buttons = self._get_keypad(keys,'alarm_time')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set alarm time"),reply_markup=keyboard)
      return

    if value == 'ok':
      # check value of alarm-time (no, not perfect)
      if re.match("[012]\d[012345]\d",self._alarm.time_new):
        # add colon
        self._alarm.time_new = ( self._alarm.time_new[0:2] + ":" +
                                 self._alarm.time_new[2:] )
      elif not re.match("[012]\d:[012345]\d",self._alarm.time_new):
        # illegal time format
        self._bot.sendMessage(chat_id,_("illegal time value: %s") %
                                                     self._alarm.time_new)
        return

      # now save time
      self._alarm.time = self._alarm.time_new
      self._settings.set("alarm.%s.time" % self._alarm.nr,self._alarm.time)
      self._bot.sendMessage(chat_id,_("new time: %s") % self._alarm.time)

    else:
      # save digit
      self._alarm.time_new = self._alarm.time_new + value
      if len(self._alarm.time_new) > 5:
        self._alarm.time_new = self._alarm.time_new[1:]

  # set alarm snooze-delay ccallback   -------------------------------------

  def _do_alarm_snooze_callback(self,query_id,chat_id,value):
    """ set alarm snooze delay """

    self._settings.log.msg("BotThread: setting alarm snooze-delay")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.snooze_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_snooze')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set alarm snooze-delay"),
                            reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-snooze
      self._alarm.snooze = self._alarm.snooze_new
      self._settings.set("alarm.%s.snooze" % self._alarm.nr,self._alarm.snooze)
      self._bot.sendMessage(chat_id,_("new snooze-delay: %s") % self._alarm.snooze_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.snooze_new += value

  # set alarm days callback   --------------------------------------------

  def _do_alarm_days_callback(self,query_id,chat_id,value):
    """ set alarm days """

    DAYS = [datetime.date(2001, 1, i).strftime('%a') for i in range(1, 8)]

    self._settings.log.msg("BotThread: setting alarm days")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.days_new = []
      buttons = self._get_keypad(DAYS + [' ','ok'],'alarm_days')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set alarm days"),reply_markup=keyboard)
      return

    if value == 'ok':
      self._alarm.days = []
      for day in self._alarm.days_new:
        nr = 1 + DAYS.index(day)
        nr = 7 if nr == 8 else nr
        self._alarm.days.append(nr)
      self._settings.set("alarm.%s.days" % self._alarm.nr,self._alarm.days)
      self._bot.sendMessage(chat_id,_("selected days: %s") % self._alarm.days)
    elif value == " ":
      pass
    else:
      # save in list
      self._alarm.days_new += [value]

  # set alarm leds callback   ----------------------------------------------

  def _do_alarm_leds_callback(self,query_id,chat_id,value):
    """ set alarm leds """

    self._settings.log.msg("BotThread: setting alarm leds")
    self._bot.answerCallbackQuery(query_id)

    if value:
      # set value of led-alarm
      if value == '_':
        self._alarm.led_cfg['name'] = ''
        self._bot.sendMessage(chat_id,_("selected LED-alarm: %s") %
                                                                  _("No alarm"))
      else:
        self._alarm.led_cfg['name'] = value
        self._bot.sendMessage(chat_id,_("selected LED-alarm: %s") % value)
      self._settings.set("alarm.%s.led" % self._alarm.nr,self._alarm.led_cfg)

    else:
      # show list of possible alarms
      buttons = []
      for alarm in self._settings.get("_led_alarms"):
        button = InlineKeyboardButton(text=alarm,
                   callback_data='{"name":"alarm_leds", "value": "%s"}' % alarm)
        buttons.append([button])

      # append choice "no alarm"
      button = InlineKeyboardButton(text=_("No alarm"),
               callback_data='{"name":"alarm_leds", "value": "_"}')
      buttons.append([button])

      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Select LED-alarm"),reply_markup=keyboard)

  # set alarm sounds callback   --------------------------------------------

  def _do_alarm_sounds_callback(self,query_id,chat_id,value):
    """ set alarm leds """

    self._settings.log.msg("BotThread: setting alarm sounds")
    self._bot.answerCallbackQuery(query_id)

    if not hasattr(self,"_sounds"):
      self._sounds = self._settings.get("_sound_alarms")

    if value:
      # set value of sound-alarm
      if value == '_none':
        self._alarm.sound_cfg['name'] = ''
        self._bot.sendMessage(chat_id,_("selected sound-alarm: %s") %
                                                                  _("No alarm"))
      elif value == '_radio':
        self._alarm.sound_cfg['name'] = '_radio'
        self._bot.sendMessage(chat_id,_("selected sound-alarm: %s") %
                                                   _("radio (current channel)"))
      else:
        self._alarm.sound_cfg['name'] = self._sounds[int(value)]
        self._bot.sendMessage(chat_id,_("selected sound-alarm: %s") %
                                                        self._sounds[int(value)])
      self._settings.set("alarm.%s.sound" % self._alarm.nr,self._alarm.sound_cfg)
    else:
      # show list of possible alarms (two columns)
      buttons = []
      for i in range(len(self._sounds)):
        button = InlineKeyboardButton(text=self._sounds[i],
               callback_data='{"name":"alarm_sounds", "value": "%d"}' % i)
        if not i % 2:
          row = [button]
        else:
          row.append(button)
          buttons.append(row)

      # append choice "current radio-channel"
      button = InlineKeyboardButton(text=_("radio (current channel)"),
               callback_data='{"name":"alarm_sounds", "value": "_radio"}')

      if len(row) == 1:
        row.append(button)
        buttons.append(row)
      else:
        row = [button]

      # append choice "no sound alarm"
      button = InlineKeyboardButton(text=_("No alarm"),
               callback_data='{"name":"alarm_sounds", "value": "_none"}')

      if len(row) == 1:
        row.append(button)
      else:
        row = [button]
      buttons.append(row)

      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,
                            _("Select sound-alarm"),reply_markup=keyboard)

  # set LED alarm duration callback   --------------------------------------

  def _do_alarm_led_dur_callback(self,query_id,chat_id,value):
    """ set LED alarm duration """

    self._settings.log.msg("BotThread: setting LED alarm duration")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.led_dur_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_led_dur')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set LED alarm duration"),
                            reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-duration
      self._alarm.led_cfg['duration']   = self._alarm.led_dur_new
      self._settings.set("alarm.%s.led" % self._alarm.nr,self._alarm.led_cfg)

      self._alarm.disp_cfg['duration']   = self._alarm.led_dur_new
      self._settings.set("alarm.%s.display" % self._alarm.nr,self._alarm.disp_cfg)
      self._bot.sendMessage(chat_id,_("new duration: %s") % self._alarm.led_dur_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.led_dur_new += value

  # set LED delay callback   --------------------------------------------

  def _do_alarm_led_delay_callback(self,query_id,chat_id,value):
    """ set LED alarm delay """

    self._settings.log.msg("BotThread: setting LED alarm delay")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.led_delay_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_led_delay')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set LED alarm delay"),
                            reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-delay
      self._alarm.led_cfg['delay']   = self._alarm.led_delay_new
      self._settings.set("alarm.%s.led" % self._alarm.nr,self._alarm.led_cfg)

      self._alarm.disp_cfg['delay']   = self._alarm.led_delay_new
      self._settings.set("alarm.%s.display" % self._alarm.nr,self._alarm.disp_cfg)
      self._bot.sendMessage(chat_id,_("new delay: %s") % self._alarm.led_delay_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.led_delay_new += value

  # set sound alarm duration callback   --------------------------------------

  def _do_alarm_sound_dur_callback(self,query_id,chat_id,value):
    """ set sound alarm duration """

    self._settings.log.msg("BotThread: setting sound alarm duration")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.sound_dur_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_sound_dur')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set sound alarm duration"),
                            reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-duration
      self._alarm.sound_cfg['duration']   = self._alarm.sound_dur_new
      self._settings.set("alarm.%s.sound" % self._alarm.nr,self._alarm.sound_cfg)
      self._bot.sendMessage(chat_id,_("new duration: %s") % self._alarm.sound_dur_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.sound_dur_new += value

  # set sound delay callback   --------------------------------------------

  def _do_alarm_sound_delay_callback(self,query_id,chat_id,value):
    """ set sound alarm delay """

    self._settings.log.msg("BotThread: setting sound alarm delay")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.sound_delay_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_sound_delay')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set sound alarm delay"),
                            reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-delay
      self._alarm.sound_cfg['delay']   = self._alarm.sound_delay_new
      self._settings.set("alarm.%s.sound" % self._alarm.nr,self._alarm.sound_cfg)
      self._bot.sendMessage(chat_id,_("new delay: %s") % self._alarm.sound_delay_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.sound_delay_new += value

  # set alarm volume callback   --------------------------------------------

  def _do_alarm_vol_callback(self,query_id,chat_id,value):
    """ set alarm volume """

    self._settings.log.msg("BotThread: setting alarm volume")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.vol_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_vol')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set alarm volume"),reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-volume
      self._alarm.sound_cfg['volume'] = self._alarm.vol_new
      self._settings.set("alarm.%s.sound" % self._alarm.nr,self._alarm.sound_cfg)
      self._bot.sendMessage(chat_id,_("new volume: %s") % self._alarm.vol_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.vol_new += value

  # set alarm fadein callback   --------------------------------------------

  def _do_alarm_fadein_callback(self,query_id,chat_id,value):
    """ set alarm fadein """

    self._settings.log.msg("BotThread: setting alarm fadein")
    self._bot.answerCallbackQuery(query_id)

    if not value:
      # reset and show keyboard
      self._alarm.fadein_new = ""
      keys = [str(i+1) for i in range(9)]
      keys += [' ','0','ok']
      buttons = self._get_keypad(keys,'alarm_fadein')
      keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
      self._bot.sendMessage(chat_id,_("Set alarm fadein"),reply_markup=keyboard)
      return

    if value == 'ok':
      # set value of alarm-fadein
      self._alarm.sound_cfg['fadein'] = self._alarm.fadein_new
      self._settings.set("alarm.%s.sound" % self._alarm.nr,self._alarm.sound_cfg)
      self._bot.sendMessage(chat_id,_("new fadein: %s") % self._alarm.fadein_new)
    elif value == " ":
      pass
    else:
      # save digit
      self._alarm.fadein_new += value

  # fallback handler for unknown commands   --------------------------------

  def _do_fallback(self,chat_id,text):
    """ process unhandled messages """

    self._settings.log.msg("BotThread: cannot interpret %s" % text)
    response = _("sorry, but I don't understand '%s'") % text
    self._bot.sendMessage(chat_id,response)

  # handle updates from telegram   -----------------------------------------

  def _handle_updates(self,update):
    """ handle updates from telegram. This is only a multiplexer method """

    if update.has_key('message'):
      self._handle_message(update['message'])
    else:
      self._handle_callback(update['callback_query'])

  # handle text messages   ------------------------------------------------

  def _handle_message(self,msg):
    """ handle objects of type message from telegram """
    chat = msg['chat']
    content_type, chat_type, chat_id = telepot.glance(msg)
    if content_type != 'text':
      return

    # we only support private text messages and only messages from self._user_id
    if chat['type'] != "private" or msg['from']['id'] != self._user_id:
      self._settings.log.msg("BotThread: ignoring message (wrong type of id)")
      return

    text = msg['text']
    # do some text analysis and pass messages to handlers
    for (regex,handler) in self._handler:
      if regex.match(text):
        handler(chat_id,text)
        return
    self._do_fallback(chat_id,text)

  # handle callbacks   ----------------------------------------------------

  def _handle_callback(self,query):
    """ handle objects of type callback_query from telegram """

    if query['from']['id'] != self._user_id:
      self._settings.log.msg("BotThread: ignoring message (wrong id)")
      return

    query_id      = query['id']
    chat_id       = query['message']['chat']['id']
    callback_data = query['data']
    self._settings.log.msg("BotThread: callback_data: %s" % callback_data)

    # extract and call callback-function
    cinfo = json.loads(callback_data)

    func_name = "_do_%s_callback" % cinfo['name']
    if hasattr(self,func_name):
      self._settings.log.msg("BotThread: executing %s(%s)" % (func_name,cinfo['value']))
      func = getattr(self,func_name)
      func(query_id,chat_id,cinfo['value'])
    else:
      self._settings.log.msg("BotThread: method %s not found" % func_name)

  # return yes/no keyboard   ------------------------------------------------

  def _yesno_keyboard(self,callback_name):
    return InlineKeyboardMarkup(
      inline_keyboard=[
        [InlineKeyboardButton(text=_("No"),
                 callback_data='{"name": "%s", "value": "no"}' % callback_name),
         InlineKeyboardButton(text=_("Yes"),
                 callback_data='{"name": "%s", "value": "yes"}' % callback_name),
         ],
        ])

  # return keypad   --------------------------------------------------------

  def _get_keypad(self,keys,name):
    """ return keypad with two additional keys """

    buttons = []
    top_rows = len(keys)//3 - 1
    # handle rows except last
    for i in range(top_rows):
      row = []
      for j in range(3):
        nr = str(keys[i*3 + j])
        button = InlineKeyboardButton(text=nr,
                   callback_data='{"name": "%s", "value": "%s"}' % (name,nr))
        row.append(button)
      buttons.append(row)

    # handle last row
    row = []
    for i in [-3,-2,-1]:
      button = InlineKeyboardButton(text=str(keys[i]),
                   callback_data='{"name": "%s", "value": "%s"}' %
                                  (name,str(keys[i])))
      row.append(button)
    buttons.append(row)
    return buttons

  # return keypad   --------------------------------------------------------

  def _get_alarm_keyboard(self,name):
    """ return keypad for alarm-selection """

    # send a keyboard with a button for each alarm
    buttons = []
    for i in range(self._settings.MAX_ALARMS):
      nr = str(i+1)
      button = InlineKeyboardButton(text=nr,
                       callback_data='{"name":"%s", "value": %s}' % (name,nr))
      buttons.append(button)

    return buttons

  # run the thread   -------------------------------------------------------

  def run(self):
    self._settings.log.msg("BotThread: running BotThread")
    offset = None

    # start configuration of poll-timeouts
    poll_event    = BotThread.POLL_SHORT
    poll_telegram = BotThread.POLL_LONG

    while not self._stop_event.wait(poll_event):
      self._settings.log.msg("BotThread: polling telegram ...")
      try:
        result = self._bot.getUpdates(offset=offset,
                                      timeout=poll_telegram)

        if len(result) > 0:
          # No sort. Trust server to give messages in correct order.
          for update in result:
            offset = update['update_id'] + 1
            self._handle_updates(update)

        # reset timeouts to standard
        poll_event    = BotThread.POLL_SHORT
        poll_telegram = BotThread.POLL_LONG

      except TelegramError as e:
        if e.error_code == 404:
          # wrong bot-id??
          self._settings.log.msg("BotThread: received 404 - not found. Wrong bot-ID?")
          break
        else:
          self._settings.log.msg(traceback.format_exc())
          # swap timeouts, since something is going wrong
          poll_event    = BotThread.POLL_LONG
          poll_telegram = BotThread.POLL_SHORT

      except:
        self._settings.log.msg(traceback.format_exc())
        # swap timeouts, since something is going wrong
        poll_event    = BotThread.POLL_LONG
        poll_telegram = BotThread.POLL_SHORT

    self._settings.log.msg("BotThread: terminating BotThread")
