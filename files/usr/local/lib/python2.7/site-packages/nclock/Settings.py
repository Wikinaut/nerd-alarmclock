#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of Settings - a value holder class
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

from threading import Lock, Event

class Settings(object):
  """ Object with shared settings """

  # initialize object   ----------------------------------------------------

  def __init__(self,parser):
    """ Constructor """

    # public fields
    self.config_parser = parser
    self.debug = self.get_value('GLOBAL','debug','0')
    self.stop_event = Event()
    self.time_change_listener = []             # calls backs for time change

    # private fields
    self._values   = {}
    self._listener = {}
    self._lock     = Lock()

  # --- read a configuration value   -----------------------------------------

  def get_value(self,section,option,default):
    """ get value of config-variabele and return given default if unset """

    if self.config_parser.has_section(section):
      try:
        value = self.config_parser.get(section,option)
      except:
        value = default
    else:
      value = default
    return value

  # --- load settings   ----------------------------------------------------

  def load(self):
    pass
  
  # --- save settings   ----------------------------------------------------

  def save(self):
    pass

  # set a setting   --------------------------------------------------------

  def set(self,name,value):
    """ set a value """

    old_value = None
    if self._values.has_key(name):
      old_value = self._values[name]
      
    with self._lock:
      self._values[name] = value

    # call listeners
    if self._listeners.has_key(name):
      for listener in self._listeners[name]:
        listener(old_value,value)
    
    return old_value
    
  # query a setting   -------------------------------------------------------

  def get(self,name):
    """ query a value by name """

    if self._values.has_key(name):
      return self._values[name]
    else:
      return None

  # add settings listener   -------------------------------------------------

  def add_settings_listener(self,name,func):
    """ add a change-listener for attribute name """

    with self._lock:
      if self._listener.has_key(name):
        self._listener[name].append(func)
      else:
        self._listener[name] = [func]

  # add time-change listener   ----------------------------------------------

  def add_timechange_listener(self,func):
    """ add a change-listener for time changes """

    with self._lock:
      self.time_change_listener.append(func)
