#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of Settings - a value holder class
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

from threading import Lock

class Settings(object):
  """ Object with shared settings """

  # initialize object   ----------------------------------------------------

  def __init__(self):
    """ Constructor """
    
    self.__values   = {}
    self.__listener = {}
    self.__lock     = Lock()

  # set a setting   --------------------------------------------------------

  def set(self,name,value):
    """ set a value """

    old_value = None
    if self.__values.has_key(name):
      old_value = self.__values[name]
      
    self.__lock.aquire()
    self.__values[name] = value
    self.__lock.release()

    # call listeners
    
    return old_value
    
  # query a setting   -------------------------------------------------------

  def get(self.name):
    """ query a value by name """

    if self.__values.has_key(name):
      return self.__values[name]
    else:
      return None

  # add listener   ----------------------------------------------------------

  def add_listener(name,func):
    """ add a change-listener for attribute name """

    self.__lock.aquire()
    if self.__listeners.has_key(name):
      self.__listeners[name].append(func)
    else:
      self.__listeners[name] = [func]
    self.__lock.release()
