#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of TimeKeeperThread - this thread keeps track of time.
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time
from threading import Thread

class TimeKeeperThread(Thread):
  """ TimeKeeper thread """

  # constants   ------------------------------------------------------------

  POLL_INTERVAL  = 5

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    
    super(TimeKeeperThread,self).__init__(name="TimeKeeperThread")
    self._settings   = settings
    self._stop_event = settings.stop_event

  # --- notifiy listeners   ------------------------------------------------

  def _notify_listeners(self,old,new):
    """ notify parties interessted in time change events """

    self._settings.log.msg("notifying listeners: old: %s, new: %s" % (old,new))

    for func in self._settings.time_change_listener:
      func(old,new)

  # run the thread   -------------------------------------------------------

  def run(self):
    self._settings.log.msg("running TimeKeeperThread")
    poll_int = TimeKeeperThread.POLL_INTERVAL
    old_time = [None,None]
    while True:
      if self._stop_event.wait(poll_int):
        break
      new_time = time.strftime("%Y:%m:%d %H:%M").split()
      if old_time[1] != new_time[1]:
        self._notify_listeners(old_time,new_time)
        old_time = new_time

      # set poll_int small enough so that we hit the minute-updates
      poll_int = min(60-time.localtime().tm_sec,TimeKeeperThread.POLL_INTERVAL)

    self._settings.log.msg("terminating TimeKeeperThread")
