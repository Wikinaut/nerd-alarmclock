#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of TimeKeeperThread - this thread keeps track of time.
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time
from threading import Thread

class TimeKeeperThread(Thread):
  """ TimeKeeper thread """

  # constants   ------------------------------------------------------------

  POLL_INTERVAL  = 5

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    
    super(TimeKeeperThread,self).__init__(name="TimeKeeperThread")
    self._settings   = settings
    self._stop_event = settings.stop_event

    # handle day-mode and day-mode changes
    self._day_start = self._settings.get("day.start")
    self._day_end   = self._settings.get("day.end")
    self._day_mode  = None
    self._set_day_mode(time.strftime("%H:%M"))
    self._settings.add_settings_listener("day.start",self.on_day_limit)
    self._settings.add_settings_listener("day.end",self.on_day_limit)


  # set day_mode   ---------------------------------------------------------

  def _set_day_mode(self,now):
    """ set day-mode """

    if self._day_start <= now and now <= self._day_end:
      new_mode = "day"
    else:
      new_mode = "night"

    if new_mode != self._day_mode:
      self._settings.set("_day_mode",new_mode)
      self._day_mode = new_mode


  # --- day.start/day.end listener   ---------------------------------------

  def on_day_limit(self,name,old,new):
    """ process date-limit changes (save new value) """
    if name == "day.start":
      self._day_start = new
    else:
      self._day_end   = new

  # run the thread   -------------------------------------------------------

  def run(self):
    self._settings.log.msg("TimeKeeperThread: running TimeKeeperThread")
    poll_int = TimeKeeperThread.POLL_INTERVAL
    old_time = [None,None]
    while True:
      if self._stop_event.wait(poll_int):
        break
      new_time = time.strftime("%Y:%m:%d %H:%M").split()

      # check for date change
      if old_time[0] != new_time[0]:
        self._settings.set('_current_date',new_time[0])

      # check for time change
      if old_time[1] != new_time[1]:
        self._settings.set('_current_time',new_time[1])

      # check for day-mode change
      self._set_day_mode(new_time[1])

      # save new time
      old_time = new_time

      # set poll_int small enough so that we hit the minute-updates
      poll_int = min(60-time.localtime().tm_sec,TimeKeeperThread.POLL_INTERVAL)

    self._settings.log.msg("TimeKeeperThread: terminating TimeKeeperThread")
