#!/usr/bin/python
# --------------------------------------------------------------------------
# Class definition of LedController - utility functions for the LED-strip
#
# This class also takes care of updating the LEDs during idle time
# (e.g. for clock-simulation)
#
# Please edit /etc/nerd-alarmclock.conf to configure this thread
#
# Author: Bernhard Bablok
# License: GPL3
#
# Website: https://github.com/bablokb/nerd-alarmclock
#
# --------------------------------------------------------------------------

import time, threading, colorsys

try:
  import blinkt
except:
  # we assume our test-environment
  # we assume our test-environment
  simulate=True

class LedController(object):
  """ Utility functions for the LED-strip """

  # initialize object   ----------------------------------------------------

  def __init__(self,settings):
    """ Constructor """
    self._settings = settings
    self._lock     = threading.Lock()

    settings.add_settings_listener('led_brightness',self.on_brightness)
    settings.add_timechange_listener(self.on_time)
    
  # --- time change listener   ---------------------------------------------

  def on_time(self,old,new):
    """ process time-change events (e.g. change LEDs)"""

    self._settings.log.msg("LedController.on_time_changed(%s,%s)" % (old,new))

  # --- brightness change listener   ---------------------------------------

  def on_brightness(self,old,new):
    """ process brightness-changes """

    # we only use off and four levels, so scale new appropriately
    with self._lock:
      blinkt.set_brightness(0.25*new)
      blinkt.show()

  # sunrise simulation   ---------------------------------------------------

  def sunrise(self,duration,stop_me,stay_on=False):
    """ sunrise simulation for the light-alarm """

    # hue is in degrees
    HUE_START = 0                         # red
    HUE_END   = 50                        # yellow
    L_START   = 0.2

    delta   = 1.0/(duration*60)           # fraction per second
    H_delta = (HUE_END - HUE_START)*delta
    L_delta = (1.0-L_START)*delta

    # iterate from led-brightness low->high, hue start->end,
    #         saturation high->low, lightness low->high

    H          = HUE_START
    brightness = delta
    S          = 1.0
    L          = L_START

    sec = 0
    with self._lock:
      while sec <= duration*60:
        # wait one second and bail out if stopped
        if stop_me.wait(1):
          blinkt.clear()
          blinkt.show()
          return

        # convert HSL to RGB ...
        (R,G,B) = colorsys.hls_to_rgb(H/360.0,L,S)
        R = 255*R
        G = 255*G
        B = 255*B

        # ... and show
        blinkt.set_all(R,G,B,brightness)
        blinkt.show()

        # update values
        sec        = sec + 1
        brightness = brightness + delta
        H          = H + H_delta
        L          = L + L_delta

      # turn of LEDs
      if not repeat:
        blinkt.clear()
        blinkt.show()

  # police signal   --------------------------------------------------------

  def police(self,stop_me,duration):
    """ simulate police signal (modified from blinkt-example larson.py) """
    
    VALUES = [0, 0, 0, 0, 0, 16, 64, 255, 64, 16, 0, 0, 0, 0, 0, 0]

    start_time = time.time()
    end_time   = start_time + 60*duration
    now        = start_time
    
    with self._lock:
      while now <= end_time:

        delta  = (now - start_time) * 16
        offset = int(abs((delta % 16) - 8))

        for i in range(8):
          blinkt.set_pixel(i,0,0,VALUES[offset + i])

        blinkt.show()
        if stop_me.wait(0.1):
          blinkt.clear()
          blinkt.show()
          return
        now = time.time()
